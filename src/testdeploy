const express = require("express");
const TronWeb = require("tronweb");
const fs = require("fs");
const path = require("path");

const app = express();
app.use(express.json());

// Load environment variables
const envPath = path.join(__dirname, "../.env/testprivate.txt");
if (!fs.existsSync(envPath)) {
  console.error("❌ Error: .env/testprivate.txt file is missing.");
  process.exit(1);
}

const envData = fs.readFileSync(envPath, "utf8").split("\n");
const fullNode = envData.find((line) => line.startsWith("NODE_URL="))?.split("=")[1].trim();
const ledgerIndex = envData.find((line) => line.startsWith("LEDGER_INDEX="))?.split("=")[1].trim();

if (!fullNode) {
  console.error("❌ Error: Missing NODE_URL in .env/testprivate.txt");
  process.exit(1);
}

// API route to deploy smart contract
app.post("/deploy", async (req, res) => {
  try {
    const { compiledFolderPath } = req.body;

    if (!compiledFolderPath || !fs.existsSync(compiledFolderPath)) {
      return res.status(400).json({ error: "Invalid compiled folder path" });
    }

    // Find ABI and Bytecode files
    const files = fs.readdirSync(compiledFolderPath);
    const abiFile = files.find((file) => file.endsWith("ABI.json"));
    const bytecodeFile = files.find((file) => file.endsWith("Bytecode.txt"));

    if (!abiFile || !bytecodeFile) {
      return res.status(400).json({ error: "Could not find ABI.json or Bytecode.txt" });
    }

    // Load contract data
    const abi = JSON.parse(fs.readFileSync(path.join(compiledFolderPath, abiFile), "utf8"));
    const bytecode = fs.readFileSync(path.join(compiledFolderPath, bytecodeFile), "utf8").trim();

    // Initialize TronWeb
    const tronWeb = new TronWeb({
      fullHost: fullNode,
      tronLedger: true, // Enable Ledger support
    });

    console.log("🚀 Deploying contract...");

    // Deploy contract
    const tx = await tronWeb.contract().new({
      abi,
      bytecode,
      feeLimit: 100_000_000,
      callValue: 0,
      userFeePercentage: 1,
      originEnergyLimit: 10_000_000,
    }).send({
      shouldPollResponse: true,
      privateKey: null, // Ledger will handle signing
    });

    console.log("✅ Contract deployed successfully:", tx.address);
    res.json({ success: true, contractAddress: tx.address });

  } catch (error) {
    console.error("❌ Deployment failed:", error);
    res.status(500).json({ error: error.message });
  }
});

// Start server
app.listen(3001, () => {
  console.log("🚀 Deployment server running on http://localhost:3001");
});
